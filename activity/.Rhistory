cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
script_results_identical('pack_sum'); multi_expr_creates_var('pack_sum')
skip()
pack_sum
quantie(pack_sum$count, probs = 0.99)
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
print(result1)
# Don't change any of the code below. Just type submit()
# Don't change any of the code below. Just type submit()
# when you think you understand it.
# We've already done this part, but we're repeating it
# here for clarity.
by_package <- group_by(cran, package)
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
# Here's the new bit, but using the same approach we've
# been using this whole time.
top_countries <- filter(pack_sum, countries > 60)
result1 <- arrange(top_countries, desc(countries), avg_bytes)
# Print the results to the console.
print(result1)
print(results1)
skip()
submit()
submit()
View(result3)
select()
print()
cran(select()print())
skip()
skip()
skip()
skip()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
submit()
source('C:/Users/Champ/AppData/Local/Temp/Rtmp69wUfn/script1.R')
submit()
source('C:/Users/Champ/AppData/Local/Temp/Rtmp69wUfn/script1.R')
source('C:/Users/Champ/AppData/Local/Temp/Rtmp69wUfn/script1.R')
skip()
students3
skip()
?spread
skip)
skip()
extract_numeric("class5")
skip()
students4
skip()
skip()
skip()
passed
failed
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
skip()
skip()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
my-date <- ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./data/Dataset.zip",method="curl")
setwd("~/")
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./data/Dataset.zip",method="curl")
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./data/Dataset.zip",method="curl")
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./data/Dataset.zip",method="curl")
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./data/Dataset.zip",method="curl")
path_rf <- file.path("./data" , "UCI HAR Dataset")
files<-list.files(path_rf, recursive=TRUE)
files
library(swirl)
swirl()
head(airquality)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout=c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
omnitest(correctExpr='p[["formula"]]')
p[["x.limits"]]
table(f)
xyplot(y ~ x | f, layout = c(2, 1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
colors(sample=10)
sample(colors(),10)
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe <- p1(20)
showMe(p1(20))
showMe(p1(20))
skip()
swirl()
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color=drv, geom = c("point", "smooth"))
qplot(y=hwy, data = mpg, color = drv)
myhigh
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
skip()
swirl()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method ="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,methods="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,(method="loess"))
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method=loess)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv, method="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv, method=(string)"loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv, method=("loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv, method=("loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv, method=("loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv, method=("loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv, method=("loess"))
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv, method("loess"))
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv, method, "loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
omnitest(correctExpr='qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")')
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method=loess)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,(method="loess"))
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method.skeleton)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loss")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="l")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
install.packages("loess")
install.packages("loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv))
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,methods(generic.function = "loess"))
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,methods(generic.function, "loess"))
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,methods(generic.function, "loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,methods(generic.function, "loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,methods(generic.function, "loess"))
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess"))
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")}
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
info()
skip()
swirl()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
0
qplot(displ,hwy,data=mpg)
install.packages("labeling")
qplot(displ,hwy,data=mpg)
swirl()
library(swirl)
swirl()
qplot(displ,hwy,data=mpg)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(displ,hwy,data=mpg,geom-c("point","smooth"),facets=.~drv,method="loess")
qplot(displ,hwy,data=mpg,geom-c("point","smooth"),facets=.~drv)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drvmethod="loess")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method="loss")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method="loess")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method="loes")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method="less")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method="loes")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method="loess")
skip ()
swirl()
detach("package:swirl", unload=TRUE)
library("swirl", lib.loc="~/R/win-library/3.2")
install.packages(c("BH", "curl", "devtools", "digest", "git2r", "httr", "jsonlite", "memoise", "plotrix", "R6", "Rcpp", "rgl", "rstudioapi", "tidyr"))
install.packages(c("BH", "curl", "devtools", "digest", "git2r",
library(swirl)
library(swirl)
library(swirl)
swirl()
skip()
swirl()
nxt()
skip
qplot
qplot(displ,hwy,data=mpg,geom-c(point,smooth),facets=.~drv)
qplot(displ,hwy,data=mpg,geom-c("point","smooth"),facets=.~drv)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,methods("loess""))
methods("loess", class=NULL)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method=NULL)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,methods(NULL))
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method=FALSE)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method=TRUE)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method=NULL)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method=0)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method(0))
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method=NA)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method=data)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method="data")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method="FALSE")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method="20")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method="loess")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method="NULL")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method("NULL"))
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,MethodsListSelect(f, env, mlist = NULL, fENV = if (is(fdef, "genericFunction"))environment)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,MethodsListSelect(f, env, mlist = NULL, fENV = if (is(fdef, "genericFunction"))environment)
methods::addNextMethod()
MethodsList(.loess, ... =)
makeMethodsList
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
makeMethodsList(object, level = "loess")
makeMethodsList(object, level = 1)
makeMethodsList()
function (object, level = 1)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
library(swirl)
swirl()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
skip()
Skip{swirl()}
Skip(swirl)
Skip()
skip()
swirl()
skip(swirl)
skip()
swirl()
methods::addNextMethod(method = "loess")
methods::addNextMethod(method, f = "loess", mlist, optional=FALSE, envir)
methods::allNames("loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,methods::allNames("loess"))
skip()
swirl()
str(diamonds)
qplot("price", data set = diamonds)
0
qplot(price,data=diamonds)
0
range(diamonds, na.rm = FALSE)
range(diamonds$price)
0
qplot(price,data=diamonds,binwidth=18497/30)
0
brk
0
counts
0
qplot(price,data-diamonds,binwidth=18497/30,fill=cut)
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
0
qplot(price,data=diamonds,geom="density")
0
qplot(price,data=diamonds,geom="density",color=cut)
qplot(carat,price,data=data)
0
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,set=cut)
0
qplot(carat,price,data=diamonds, shape=cut)
0
qplot(carat,price,data=diamonds, color=cut)
0
qplot(carat,price,data=diamonds, color=cut,geom=c("point", "smooth"),method="lm")
qplot(carat,price,data=diamonds, color=cut,geom=c("point", "smooth"))
qplotReal <- qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv, method="loess")
library(swirl)
swirl()
qplotReal <- qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv, method="loess")
skip()
swirl()
0
rm(ggplot())
rm(ggplot2)
skip()
rm(ggplot2)
qplotReal <- qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot <- function(...,method="deprecated"){
qplotReal(...)
}
qplotReal <- qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
install.packages("qplotReal")
qplotReal <- qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
install.packages("qplotreal")
swirl()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
info()
nxt()
library(swirl)
delete_progress("Ken")
delete_progress("Champ")
delete_progress(Ken)
delete_progress("babyblue4u8989")
delete_progress("Fire Safety")
delete_progress("Armeda and Champ")
delte_progress("Armeda")
delete_progress("Armeda")
delete_progress("Champ2013")
delete_progress("Barbie")
delete_progress("Jennifer")
rm(list=ls())
swirl()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv
qplot <- function(...,method="deprecated"){}
skip()
library(knitr)
opts_chunk$set(echo = TRUE)
library(dplyr)
library(lubridate)
library(ggplot2)
data <- read.csv("activity.csv", header = TRUE, sep = ',', colClasses = c("numeric", "character", "integer"))
load("~/.RData")
library(knitr)
opts_chunk$set(echo = TRUE)
library(dplyr)
library(lubridate)
library(ggplot2)
data <- read.csv("activity.csv", header = TRUE, sep = ',', colClasses = c("numeric", "character", "integer"))
data$date <- ymd(data$date)
str(data)
head(data)
steps <- data%>%
filter(!is.na(steps)) %>%
group_by(date) %>%
summarize(steps = sum(steps)) %>%
print
setwd("~/activity")
library(knitr)
opts_chunk$set(echo = TRUE)
library(dplyr)
library(lubridate)
library(ggplot2)
data <- read.csv("activity.csv", header = TRUE, sep = ',', colClasses = c("numeric", "character", "integer"))
data$date <- ymd(data$date)
str(data)
head(data)
steps <- data%>%
filter(!is.na(steps)) %>%
group_by(date) %>%
summarize(steps = sum(steps)) %>%
print
ggplot(steps, aes(x = steps)) +
geom_histogram(fill = "firebrick", binwidth = 1000) +
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
mean_steps <- mean(steps$steps, na.rm = TRUE)
median_steps <- median(steps$steps, na.rm = TRUE)
mean_steps
median_steps
interval <- data %>%
filter(!is.na(steps)) %>%
group_by(interval) %>%
summarize(steps = mean(steps))
ggplot(interval, aes(x=interval, y=steps)) +
geom_line(color = "firebrick")
```interval[which.max(interval$steps),]
interval[which.max(interval$steps),]
sum(is.na(data$steps))
data_full <- data
nas <- is.na(data_full$steps)
avg_interval <- tapply(data_full$steps, data_full$interval, mean, na.rm=TRUE, simplify=TRUE)
data_full$steps[nas] <- avg_interval[as.character(data_full$interval[nas])]
sum(is.na(data_full$steps))
steps_full <- data_full %>%
filter(!is.na(steps)) %>%
group_by(date) %>%
summarize(steps = sum(steps)) %>%
print
ggplot(steps_full, aes(x = steps)) +
geom_histogram(fill = "firebrick", binwidth = 1000) +
labs(title = "Histogram of Steps per day, including missing values", x = "Steps per day", y = "Frequency")}
ggplot(steps_full, aes(x = steps)) +
geom_histogram(fill = "firebrick", binwidth = 1000) +
labs(title = "Histogram of Steps per day, including missing values", x = "Steps per day", y = "Frequency")
```
mean_steps_full <- mean(steps_full$steps, na.rm = TRUE)
median_steps_full <- median(steps_full$steps, na.rm = TRUE)
mean_steps_full
median_steps_full
data_full <- mutate(data_full, weektype = ifelse(weekdays(data_full$date) == "Saturday" | weekdays(data_full$date) == "Sunday", "weekend", "weekday"))
data_full$weektype <- as.factor(data_full$weektype)
head(data_full)
interval_full <- data_full %>%
group_by(interval, weektype) %>%
summarize(steps = mean(steps))
s <- ggplot(interval_full, aes(x=interval, y=steps, color = weektype)) +
geom_line() +
facet_wrap(~weektype, ncol = 1, nrow = 2)
print(s)
